version: '3.8'

services:
  # PostgreSQLデータベース
  postgres:
    image: postgres:15-alpine
    container_name: sbom-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sbom_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-sbom_checker}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sbom_admin -d sbom_checker"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sbom-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: sbom-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sbom-network

  # バックエンドAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sbom-backend
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-sbom_checker}
      - POSTGRES_USER=${POSTGRES_USER:-sbom_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NVD_API_KEY=${NVD_API_KEY:-}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TRIVY_CACHE_DIR=/.cache/trivy
    volumes:
      - ./backend:/app
      - upload_data:/app/uploads
      - trivy_cache:/.cache/trivy
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sbom-network
    restart: unless-stopped

  # Celery Worker (脆弱性スキャナー)
  scanner:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sbom-scanner
    command: celery -A app.celery_worker worker --loglevel=info
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-sbom_checker}
      - POSTGRES_USER=${POSTGRES_USER:-sbom_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NVD_API_KEY=${NVD_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TRIVY_CACHE_DIR=/.cache/trivy
    volumes:
      - ./backend:/app
      - upload_data:/app/uploads
      - trivy_cache:/.cache/trivy
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sbom-network
    restart: unless-stopped

  # Celery Beat (スケジューラー)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sbom-celery-beat
    command: celery -A app.celery_worker beat --loglevel=info
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-sbom_checker}
      - POSTGRES_USER=${POSTGRES_USER:-sbom_admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NVD_API_KEY=${NVD_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TRIVY_CACHE_DIR=/.cache/trivy
    volumes:
      - ./backend:/app
      - trivy_cache:/.cache/trivy
    depends_on:
      - redis
      - scanner
    networks:
      - sbom-network
    restart: unless-stopped

  # フロントエンド
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sbom-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - sbom-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  upload_data:
    driver: local
  trivy_cache:
    driver: local

networks:
  sbom-network:
    driver: bridge
